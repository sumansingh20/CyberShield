import { SignJWT, jwtVerify, type JWTPayload } from 'jose'

export async function getJWTSecretKey(): Promise<Uint8Array> {
  const secret = process.env.JWT_SECRET
  if (!secret) {
    throw new Error('JWT Secret key is not set')
  }
  return new TextEncoder().encode(secret)
}

export async function verifyJWT(token: string): Promise<JWTPayload> {
  try {
    const { payload } = await jwtVerify(token, await getJWTSecretKey())
    return payload
  } catch (error) {
    throw new Error('Your token has expired.')
  }
}

export async function signJWT(
  payload: JWTPayload,
  options: { exp?: string | number } = {}
) {
  try {
    const secret = await getJWTSecretKey()
    const jwt = await new SignJWT(payload)
      .setProtectedHeader({ alg: 'HS256', typ: 'JWT' })
      .setIssuedAt()
      .setExpirationTime(options.exp || '24h')
      .sign(secret)
    return jwt
  } catch (error) {
    throw new Error('Error signing JWT')
  }
}