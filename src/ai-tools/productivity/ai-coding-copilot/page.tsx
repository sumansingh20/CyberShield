'use client'

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/src/ui/components/ui/card'
import { Button } from '@/src/ui/components/ui/button'
import { Input } from '@/src/ui/components/ui/input'
import { Label } from '@/src/ui/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/src/ui/components/ui/select'
import { Textarea } from '@/src/ui/components/ui/textarea'
import { Badge } from '@/src/ui/components/ui/badge'
import { ScrollArea } from '@/src/ui/components/ui/scroll-area'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/src/ui/components/ui/tabs'
import { Progress } from '@/src/ui/components/ui/progress'
import { Alert, AlertDescription } from '@/src/ui/components/ui/alert'
import { Copy, Download, Code, Zap, Shield, FileText, TestTube, Clock, AlertTriangle } from 'lucide-react'

interface CodeResult {
  prompt: string
  language: string
  codeType: string
  code: string
  explanation: string
  bestPractices: string[]
  testCases: string[]
  documentation: string
  performance: {
    timeComplexity: string
    spaceComplexity: string
    optimizations: string[]
  }
  security: {
    vulnerabilities: string[]
    mitigations: string[]
    recommendations: string[]
  }
  timestamp: string
}

const PROGRAMMING_LANGUAGES = [
  'JavaScript',
  'TypeScript',
  'Python',
  'Java',
  'C#',
  'C++',
  'Rust',
  'Go',
  'Swift',
  'Kotlin',
  'PHP',
  'Ruby'
]

const CODE_TYPES = [
  { value: 'function', label: 'Function' },
  { value: 'class', label: 'Class' },
  { value: 'algorithm', label: 'Algorithm' },
  { value: 'api', label: 'API Endpoint' },
  { value: 'component', label: 'Component' },
  { value: 'utility', label: 'Utility' },
  { value: 'test', label: 'Test Suite' },
  { value: 'script', label: 'Script' }
]

export default function AICodingCopilotPage() {
  const [prompt, setPrompt] = useState('')
  const [language, setLanguage] = useState('')
  const [codeType, setCodeType] = useState('')
  const [context, setContext] = useState('')
  const [isGenerating, setIsGenerating] = useState(false)
  const [progress, setProgress] = useState(0)
  const [result, setResult] = useState<CodeResult | null>(null)
  const [error, setError] = useState<string | null>(null)

  const handleGenerate = async () => {
    if (!prompt.trim() || !language) {
      setError('Please provide a code prompt and select a programming language')
      return
    }

    setIsGenerating(true)
    setError(null)
    setProgress(0)

    // Simulate progress
    const progressInterval = setInterval(() => {
      setProgress(prev => {
        if (prev >= 90) {
          clearInterval(progressInterval)
          return 90
        }
        return prev + 10
      })
    }, 200)

    try {
      const response = await fetch('/api/tools/ai-coding-copilot', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'generate-code',
          prompt: prompt.trim(),
          language: language.toLowerCase(),
          codeType: codeType || 'function',
          context: context.trim() || undefined
        }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Code generation failed')
      }

      setResult(data)
      setProgress(100)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Code generation failed')
    } finally {
      clearInterval(progressInterval)
      setIsGenerating(false)
      setTimeout(() => setProgress(0), 1000)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  const downloadCode = () => {
    if (!result) return

    const extension = getFileExtension(result.language)
    const filename = `generated-code.${extension}`
    
    const content = `/*
 * Generated by AI Coding Copilot
 * Language: ${result.language}
 * Type: ${result.codeType}
 * Generated: ${new Date(result.timestamp).toLocaleString()}
 * 
 * Prompt: ${result.prompt}
 */

${result.code}

/*
 * DOCUMENTATION
 * ${result.documentation.replace(/\n/g, '\n * ')}
 */`

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const getFileExtension = (language: string): string => {
    const extensions: { [key: string]: string } = {
      javascript: 'js',
      typescript: 'ts',
      python: 'py',
      java: 'java',
      'c#': 'cs',
      'c++': 'cpp',
      rust: 'rs',
      go: 'go',
      swift: 'swift',
      kotlin: 'kt',
      php: 'php',
      ruby: 'rb'
    }
    return extensions[language.toLowerCase()] || 'txt'
  }

  const getLanguageColor = (language: string): string => {
    const colors: { [key: string]: string } = {
      javascript: 'bg-yellow-100 text-yellow-800',
      typescript: 'bg-blue-100 text-blue-800',
      python: 'bg-green-100 text-green-800',
      java: 'bg-red-100 text-red-800',
      'c#': 'bg-purple-100 text-purple-800',
      'c++': 'bg-indigo-100 text-indigo-800',
      rust: 'bg-orange-100 text-orange-800',
      go: 'bg-cyan-100 text-cyan-800',
      swift: 'bg-pink-100 text-pink-800',
      kotlin: 'bg-violet-100 text-violet-800'
    }
    return colors[language.toLowerCase()] || 'bg-gray-100 text-gray-800'
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-7xl">
      <div className="mb-8">
        <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          AI Coding Copilot
        </h1>
        <p className="text-lg text-muted-foreground">
          Generate high-quality code with autonomous AI assistance across multiple programming languages
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Input Form */}
        <div className="lg:col-span-1">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Code className="w-5 h-5" />
                Code Generation
              </CardTitle>
              <CardDescription>
                Describe what you want to build and let AI generate optimized code
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="prompt">Code Prompt *</Label>
                <Textarea
                  id="prompt"
                  placeholder="e.g., Create a function to sort an array using merge sort algorithm"
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  rows={4}
                  disabled={isGenerating}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="language">Programming Language *</Label>
                <Select value={language} onValueChange={setLanguage} disabled={isGenerating}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select language" />
                  </SelectTrigger>
                  <SelectContent>
                    {PROGRAMMING_LANGUAGES.map((lang) => (
                      <SelectItem key={lang} value={lang}>
                        {lang}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="codeType">Code Type</Label>
                <Select value={codeType} onValueChange={setCodeType} disabled={isGenerating}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select code type (optional)" />
                  </SelectTrigger>
                  <SelectContent>
                    {CODE_TYPES.map((type) => (
                      <SelectItem key={type.value} value={type.value}>
                        {type.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="context">Additional Context</Label>
                <Textarea
                  id="context"
                  placeholder="Provide additional context, requirements, or constraints..."
                  value={context}
                  onChange={(e) => setContext(e.target.value)}
                  rows={3}
                  disabled={isGenerating}
                />
              </div>

              {error && (
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              {isGenerating && (
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">Generating code...</span>
                    <span className="text-sm font-medium">{progress}%</span>
                  </div>
                  <Progress value={progress} />
                </div>
              )}

              <Button 
                onClick={handleGenerate} 
                disabled={isGenerating || !prompt.trim() || !language}
                className="w-full"
              >
                <Zap className="w-4 h-4 mr-2" />
                {isGenerating ? 'Generating...' : 'Generate Code'}
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Results */}
        <div className="lg:col-span-2">
          {result && (
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="flex items-center gap-2">
                      <Code className="w-5 h-5" />
                      Generated Code
                    </CardTitle>
                    <CardDescription>
                      High-quality {result.language} {result.codeType} with comprehensive documentation
                    </CardDescription>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge className={getLanguageColor(result.language)}>
                      {result.language}
                    </Badge>
                    <Badge variant="outline">
                      {result.codeType}
                    </Badge>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="code" className="w-full">
                  <TabsList className="grid w-full grid-cols-6">
                    <TabsTrigger value="code">Code</TabsTrigger>
                    <TabsTrigger value="explanation">Explanation</TabsTrigger>
                    <TabsTrigger value="performance">Performance</TabsTrigger>
                    <TabsTrigger value="security">Security</TabsTrigger>
                    <TabsTrigger value="tests">Tests</TabsTrigger>
                    <TabsTrigger value="docs">Docs</TabsTrigger>
                  </TabsList>

                  <TabsContent value="code" className="space-y-4">
                    <div className="flex items-center justify-between">
                      <h3 className="font-semibold">Generated Code</h3>
                      <div className="flex gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => copyToClipboard(result.code)}
                        >
                          <Copy className="w-4 h-4 mr-2" />
                          Copy
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={downloadCode}
                        >
                          <Download className="w-4 h-4 mr-2" />
                          Download
                        </Button>
                      </div>
                    </div>
                    <div className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto">
                      <pre><code>{result.code}</code></pre>
                    </div>
                  </TabsContent>

                  <TabsContent value="explanation" className="space-y-4">
                    <div className="flex items-center gap-2 mb-4">
                      <FileText className="w-5 h-5" />
                      <h3 className="font-semibold">Code Explanation</h3>
                    </div>
                    <div className="prose max-w-none">
                      <p>{result.explanation}</p>
                    </div>
                    
                    <div className="mt-6">
                      <h4 className="font-semibold mb-3">Best Practices Followed</h4>
                      <div className="grid grid-cols-1 gap-2">
                        {result.bestPractices.map((practice, index) => (
                          <div key={index} className="flex items-start gap-2">
                            <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0" />
                            <span className="text-sm">{practice}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </TabsContent>

                  <TabsContent value="performance" className="space-y-4">
                    <div className="flex items-center gap-2 mb-4">
                      <Clock className="w-5 h-5" />
                      <h3 className="font-semibold">Performance Analysis</h3>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <Card>
                        <CardHeader className="pb-3">
                          <CardTitle className="text-sm">Time Complexity</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <Badge variant="secondary" className="text-lg font-mono">
                            {result.performance.timeComplexity}
                          </Badge>
                        </CardContent>
                      </Card>
                      
                      <Card>
                        <CardHeader className="pb-3">
                          <CardTitle className="text-sm">Space Complexity</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <Badge variant="secondary" className="text-lg font-mono">
                            {result.performance.spaceComplexity}
                          </Badge>
                        </CardContent>
                      </Card>
                    </div>

                    <div className="mt-6">
                      <h4 className="font-semibold mb-3">Optimization Suggestions</h4>
                      <div className="space-y-2">
                        {result.performance.optimizations.map((optimization, index) => (
                          <div key={index} className="flex items-start gap-2">
                            <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0" />
                            <span className="text-sm">{optimization}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </TabsContent>

                  <TabsContent value="security" className="space-y-4">
                    <div className="flex items-center gap-2 mb-4">
                      <Shield className="w-5 h-5" />
                      <h3 className="font-semibold">Security Analysis</h3>
                    </div>
                    
                    <div className="space-y-6">
                      <div>
                        <h4 className="font-semibold mb-3 text-red-600">Potential Vulnerabilities</h4>
                        <div className="space-y-2">
                          {result.security.vulnerabilities.map((vuln, index) => (
                            <Alert key={index} variant="destructive">
                              <AlertTriangle className="h-4 w-4" />
                              <AlertDescription>{vuln}</AlertDescription>
                            </Alert>
                          ))}
                        </div>
                      </div>

                      <div>
                        <h4 className="font-semibold mb-3 text-green-600">Security Mitigations</h4>
                        <div className="space-y-2">
                          {result.security.mitigations.map((mitigation, index) => (
                            <div key={index} className="flex items-start gap-2">
                              <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0" />
                              <span className="text-sm">{mitigation}</span>
                            </div>
                          ))}
                        </div>
                      </div>

                      <div>
                        <h4 className="font-semibold mb-3 text-blue-600">Security Recommendations</h4>
                        <div className="space-y-2">
                          {result.security.recommendations.map((recommendation, index) => (
                            <div key={index} className="flex items-start gap-2">
                              <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0" />
                              <span className="text-sm">{recommendation}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </TabsContent>

                  <TabsContent value="tests" className="space-y-4">
                    <div className="flex items-center gap-2 mb-4">
                      <TestTube className="w-5 h-5" />
                      <h3 className="font-semibold">Recommended Test Cases</h3>
                    </div>
                    
                    <div className="space-y-3">
                      {result.testCases.map((testCase, index) => (
                        <Card key={index}>
                          <CardContent className="pt-4">
                            <div className="flex items-center gap-2">
                              <Badge variant="outline">Test {index + 1}</Badge>
                              <span className="text-sm">{testCase}</span>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </TabsContent>

                  <TabsContent value="docs" className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <FileText className="w-5 h-5" />
                        <h3 className="font-semibold">Documentation</h3>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => copyToClipboard(result.documentation)}
                      >
                        <Copy className="w-4 h-4 mr-2" />
                        Copy Docs
                      </Button>
                    </div>
                    
                    <ScrollArea className="h-96 w-full border rounded-lg p-4">
                      <div className="prose max-w-none">
                        <pre className="whitespace-pre-wrap">{result.documentation}</pre>
                      </div>
                    </ScrollArea>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
          )}

          {!result && (
            <Card>
              <CardContent className="py-12 text-center">
                <Code className="w-12 h-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-semibold mb-2">No Code Generated Yet</h3>
                <p className="text-muted-foreground">
                  Enter a code prompt and select a programming language to generate optimized code with AI assistance.
                </p>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  )
}
