"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/src/ui/components/ui/card"
import { Button } from "@/src/ui/components/ui/button"
import { Input } from "@/src/ui/components/ui/input"
import { Label } from "@/src/ui/components/ui/label"
import { Textarea } from "@/src/ui/components/ui/textarea"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/src/ui/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/src/ui/components/ui/select"
import { Badge } from "@/src/ui/components/ui/badge"
import { AlertTriangle, Code, Copy, Download, ArrowLeft, Zap, Shield, Terminal, Globe } from "lucide-react"
import Link from "next/link"

interface PayloadConfig {
  type: string
  platform: string
  encoding: string
  format: string
  target_ip?: string
  target_port?: number
  callback_ip?: string
  callback_port?: number
  custom_params?: Record<string, string>
}

interface GeneratedPayload {
  id: string
  type: string
  platform: string
  encoding: string
  format: string
  payload: string
  size: number
  description: string
  usage_notes: string[]
  evasion_techniques: string[]
  detection_methods: string[]
  references: string[]
  generated_at: string
}

interface PayloadResult {
  config: PayloadConfig
  payloads: GeneratedPayload[]
  total_generated: number
  generation_time: number
  timestamp: string
}

export default function PayloadGeneratorPage() {
  const [payloadType, setPayloadType] = useState("reverse_shell")
  const [platform, setPlatform] = useState("linux")
  const [encoding, setEncoding] = useState("none")
  const [format, setFormat] = useState("raw")
  const [targetIp, setTargetIp] = useState("")
  const [targetPort, setTargetPort] = useState("")
  const [callbackIp, setCallbackIp] = useState("")
  const [callbackPort, setCallbackPort] = useState("")
  const [customCommand, setCustomCommand] = useState("")
  const [result, setResult] = useState<PayloadResult | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState("")
  const [selectedPayload, setSelectedPayload] = useState<GeneratedPayload | null>(null)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError("")
    setResult(null)
    setSelectedPayload(null)

    try {
      const response = await fetch("/api/tools/payload-generator", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          type: payloadType,
          platform,
          encoding,
          format,
          target_ip: targetIp || null,
          target_port: targetPort ? parseInt(targetPort) : null,
          callback_ip: callbackIp || null,
          callback_port: callbackPort ? parseInt(callbackPort) : null,
          custom_params: {
            command: customCommand || null
          }
        })
      })

      const data = await response.json()
      
      if (!response.ok) {
        throw new Error(data.error || "Payload generation failed")
      }

      setResult(data)
      if (data.payloads.length > 0) {
        setSelectedPayload(data.payloads[0])
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred")
    } finally {
      setIsLoading(false)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  const downloadPayload = (payload: GeneratedPayload) => {
    const element = document.createElement("a")
    const file = new Blob([payload.payload], { type: "text/plain" })
    element.href = URL.createObjectURL(file)
    element.download = `payload_${payload.type}_${payload.platform}.${getFileExtension(payload.format)}`
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)
  }

  const getFileExtension = (format: string) => {
    switch (format) {
      case "python": return "py"
      case "bash": return "sh"
      case "powershell": return "ps1"
      case "javascript": return "js"
      case "c": return "c"
      case "executable": return "exe"
      default: return "txt"
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "reverse_shell": return <Terminal className="h-4 w-4" />
      case "bind_shell": return <Shield className="h-4 w-4" />
      case "web_shell": return <Globe className="h-4 w-4" />
      case "exploit": return <Zap className="h-4 w-4" />
      default: return <Code className="h-4 w-4" />
    }
  }

  const getEncodingColor = (encoding: string) => {
    switch (encoding) {
      case "none": return "text-gray-500 bg-gray-500/10"
      case "base64": return "text-blue-500 bg-blue-500/10"
      case "url": return "text-green-500 bg-green-500/10"
      case "hex": return "text-purple-500 bg-purple-500/10"
      case "unicode": return "text-orange-500 bg-orange-500/10"
      default: return "text-gray-500 bg-gray-500/10"
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 p-4">
      <div className="container mx-auto max-w-7xl">
        <div className="mb-8 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Link href="/tools">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Tools
              </Button>
            </Link>
            <div>
              <h1 className="text-4xl font-bold text-white">Payload Generator</h1>
              <p className="text-slate-300 mt-2">
                Generate custom payloads for various attack vectors and platforms
              </p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Configuration Form */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Code className="h-5 w-5" />
                  Payload Configuration
                </CardTitle>
                <CardDescription>
                  Configure your custom payload generation
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-4">
                  <div>
                    <Label htmlFor="payloadType">Payload Type</Label>
                    <Select value={payloadType} onValueChange={setPayloadType}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select payload type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="reverse_shell">Reverse Shell</SelectItem>
                        <SelectItem value="bind_shell">Bind Shell</SelectItem>
                        <SelectItem value="web_shell">Web Shell</SelectItem>
                        <SelectItem value="meterpreter">Meterpreter</SelectItem>
                        <SelectItem value="exploit">Buffer Overflow</SelectItem>
                        <SelectItem value="injection">Code Injection</SelectItem>
                        <SelectItem value="persistence">Persistence</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="platform">Target Platform</Label>
                    <Select value={platform} onValueChange={setPlatform}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select platform" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="linux">Linux</SelectItem>
                        <SelectItem value="windows">Windows</SelectItem>
                        <SelectItem value="macos">macOS</SelectItem>
                        <SelectItem value="android">Android</SelectItem>
                        <SelectItem value="web">Web Application</SelectItem>
                        <SelectItem value="multi">Multi-Platform</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="encoding">Encoding Method</Label>
                    <Select value={encoding} onValueChange={setEncoding}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select encoding" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="none">None (Raw)</SelectItem>
                        <SelectItem value="base64">Base64</SelectItem>
                        <SelectItem value="url">URL Encoding</SelectItem>
                        <SelectItem value="hex">Hexadecimal</SelectItem>
                        <SelectItem value="unicode">Unicode</SelectItem>
                        <SelectItem value="xor">XOR Cipher</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="format">Output Format</Label>
                    <Select value={format} onValueChange={setFormat}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select format" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="raw">Raw Code</SelectItem>
                        <SelectItem value="python">Python Script</SelectItem>
                        <SelectItem value="bash">Bash Script</SelectItem>
                        <SelectItem value="powershell">PowerShell</SelectItem>
                        <SelectItem value="javascript">JavaScript</SelectItem>
                        <SelectItem value="c">C Code</SelectItem>
                        <SelectItem value="executable">Executable</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  {(payloadType === "reverse_shell" || payloadType === "meterpreter") && (
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="callbackIp">Callback IP</Label>
                        <Input
                          id="callbackIp"
                          value={callbackIp}
                          onChange={(e) => setCallbackIp(e.target.value)}
                          placeholder="192.168.1.100"
                        />
                      </div>
                      <div>
                        <Label htmlFor="callbackPort">Callback Port</Label>
                        <Input
                          id="callbackPort"
                          value={callbackPort}
                          onChange={(e) => setCallbackPort(e.target.value)}
                          placeholder="4444"
                        />
                      </div>
                    </div>
                  )}

                  {payloadType === "bind_shell" && (
                    <div>
                      <Label htmlFor="targetPort">Bind Port</Label>
                      <Input
                        id="targetPort"
                        value={targetPort}
                        onChange={(e) => setTargetPort(e.target.value)}
                        placeholder="8080"
                      />
                    </div>
                  )}

                  {(payloadType === "injection" || payloadType === "web_shell") && (
                    <div>
                      <Label htmlFor="customCommand">Custom Command</Label>
                      <Input
                        id="customCommand"
                        value={customCommand}
                        onChange={(e) => setCustomCommand(e.target.value)}
                        placeholder="whoami; id; pwd"
                      />
                    </div>
                  )}

                  <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-4">
                    <div className="flex items-center gap-2 text-red-500 mb-2">
                      <AlertTriangle className="h-4 w-4" />
                      <span className="font-semibold">Warning</span>
                    </div>
                    <p className="text-sm text-red-400">
                      Generated payloads are for authorized testing only. 
                      Misuse may violate laws and ethical guidelines.
                    </p>
                  </div>

                  <Button type="submit" className="w-full" disabled={isLoading}>
                    {isLoading ? "Generating..." : "Generate Payloads"}
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>

          {/* Results */}
          <div className="lg:col-span-2 space-y-6">
            {error && (
              <Card className="border-red-500/20 bg-red-500/10">
                <CardContent className="pt-6">
                  <div className="flex items-center gap-2 text-red-500">
                    <AlertTriangle className="h-4 w-4" />
                    <span className="font-semibold">Generation Error</span>
                  </div>
                  <p className="mt-2 text-red-400">{error}</p>
                </CardContent>
              </Card>
            )}

            {isLoading && (
              <Card>
                <CardContent className="pt-6">
                  <div className="flex items-center gap-2 mb-4">
                    <Code className="h-4 w-4 animate-pulse" />
                    <span>Generating custom payloads...</span>
                  </div>
                  <p className="text-sm text-gray-500">
                    Creating optimized payloads with evasion techniques
                  </p>
                </CardContent>
              </Card>
            )}

            {result && (
              <Tabs defaultValue="payloads" className="w-full">
                <TabsList className="grid w-full grid-cols-3">
                  <TabsTrigger value="payloads">Payloads ({result.total_generated})</TabsTrigger>
                  <TabsTrigger value="details">Payload Details</TabsTrigger>
                  <TabsTrigger value="usage">Usage Guide</TabsTrigger>
                </TabsList>

                <TabsContent value="payloads" className="space-y-4">
                  <Card>
                    <CardHeader>
                      <CardTitle>Generated Payloads</CardTitle>
                      <CardDescription>
                        {result.total_generated} payloads generated in {result.generation_time}ms
                      </CardDescription>
                    </CardHeader>
                  </Card>

                  <div className="space-y-4">
                    {result.payloads.map((payload, index) => (
                      <Card 
                        key={payload.id} 
                        className={`cursor-pointer transition-colors ${
                          selectedPayload?.id === payload.id 
                            ? "border-blue-500 bg-blue-500/5" 
                            : "hover:bg-slate-50 dark:hover:bg-slate-800"
                        }`}
                        onClick={() => setSelectedPayload(payload)}
                      >
                        <CardHeader className="pb-3">
                          <div className="flex justify-between items-start">
                            <div>
                              <CardTitle className="flex items-center gap-2 text-lg">
                                {getTypeIcon(payload.type)}
                                {payload.type.replace("_", " ").toUpperCase()} - {payload.platform}
                              </CardTitle>
                              <CardDescription>
                                {payload.description}
                              </CardDescription>
                            </div>
                            <div className="flex items-center gap-2">
                              <Badge className={getEncodingColor(payload.encoding)}>
                                {payload.encoding.toUpperCase()}
                              </Badge>
                              <Badge variant="secondary">
                                {payload.format}
                              </Badge>
                            </div>
                          </div>
                        </CardHeader>
                        <CardContent>
                          <div className="flex items-center justify-between text-sm text-gray-500">
                            <span>Size: {payload.size} bytes</span>
                            <div className="flex gap-2">
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={(e) => {
                                  e.stopPropagation()
                                  copyToClipboard(payload.payload)
                                }}
                              >
                                <Copy className="h-3 w-3 mr-1" />
                                Copy
                              </Button>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={(e) => {
                                  e.stopPropagation()
                                  downloadPayload(payload)
                                }}
                              >
                                <Download className="h-3 w-3 mr-1" />
                                Download
                              </Button>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </TabsContent>

                <TabsContent value="details" className="space-y-4">
                  {selectedPayload ? (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                          {getTypeIcon(selectedPayload.type)}
                          Payload Details
                        </CardTitle>
                        <CardDescription>
                          {selectedPayload.description}
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-6">
                        <div>
                          <h4 className="font-semibold mb-2 flex items-center gap-2">
                            Generated Code
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => copyToClipboard(selectedPayload.payload)}
                            >
                              <Copy className="h-3 w-3" />
                            </Button>
                          </h4>
                          <Textarea
                            value={selectedPayload.payload}
                            readOnly
                            className="font-mono text-sm min-h-[300px]"
                          />
                        </div>

                        <div>
                          <h4 className="font-semibold mb-2">Usage Notes</h4>
                          <ul className="text-sm space-y-1">
                            {selectedPayload.usage_notes.map((note, index) => (
                              <li key={index} className="flex items-start gap-2">
                                <span className="w-1 h-1 bg-blue-500 rounded-full mt-2 flex-shrink-0"></span>
                                {note}
                              </li>
                            ))}
                          </ul>
                        </div>

                        <div>
                          <h4 className="font-semibold mb-2">Evasion Techniques</h4>
                          <ul className="text-sm space-y-1">
                            {selectedPayload.evasion_techniques.map((technique, index) => (
                              <li key={index} className="flex items-start gap-2">
                                <span className="w-1 h-1 bg-green-500 rounded-full mt-2 flex-shrink-0"></span>
                                {technique}
                              </li>
                            ))}
                          </ul>
                        </div>

                        <div>
                          <h4 className="font-semibold mb-2">Detection Methods</h4>
                          <ul className="text-sm space-y-1 text-orange-600 dark:text-orange-400">
                            {selectedPayload.detection_methods.map((method, index) => (
                              <li key={index} className="flex items-start gap-2">
                                <span className="w-1 h-1 bg-orange-500 rounded-full mt-2 flex-shrink-0"></span>
                                {method}
                              </li>
                            ))}
                          </ul>
                        </div>
                      </CardContent>
                    </Card>
                  ) : (
                    <Card>
                      <CardContent className="pt-6 text-center">
                        <Code className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                        <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                          Select a Payload
                        </h3>
                        <p className="text-gray-500 dark:text-gray-400">
                          Click on any payload to view detailed information and code
                        </p>
                      </CardContent>
                    </Card>
                  )}
                </TabsContent>

                <TabsContent value="usage" className="space-y-4">
                  <Card>
                    <CardHeader>
                      <CardTitle>Usage Guide</CardTitle>
                      <CardDescription>
                        How to effectively use generated payloads
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <h4 className="font-semibold mb-2">Before Using Payloads</h4>
                        <ul className="text-sm space-y-1">
                          <li>• Ensure you have explicit authorization to test the target system</li>
                          <li>• Understand the legal implications in your jurisdiction</li>
                          <li>• Set up proper logging and monitoring</li>
                          <li>• Have a rollback plan ready</li>
                        </ul>
                      </div>

                      <div>
                        <h4 className="font-semibold mb-2">Deployment Steps</h4>
                        <ol className="text-sm space-y-1 list-decimal list-inside">
                          <li>Test payloads in isolated environment first</li>
                          <li>Configure listeners before deploying reverse shells</li>
                          <li>Monitor network traffic for payload execution</li>
                          <li>Document all activities for reporting</li>
                        </ol>
                      </div>

                      <div>
                        <h4 className="font-semibold mb-2">Common Issues</h4>
                        <ul className="text-sm space-y-1">
                          <li>• Antivirus detection - try different encoding methods</li>
                          <li>• Firewall blocking - use common ports like 80, 443</li>
                          <li>• Execution restrictions - check system policies</li>
                          <li>• Network connectivity - verify routing and NAT</li>
                        </ul>
                      </div>

                      <div className="bg-amber-500/10 border border-amber-500/20 rounded p-4">
                        <h4 className="font-semibold text-amber-600 mb-2">Best Practices</h4>
                        <ul className="text-sm text-amber-700 dark:text-amber-300 space-y-1">
                          <li>• Always test in controlled environments first</li>
                          <li>• Use encrypted communications when possible</li>
                          <li>• Clean up after testing completion</li>
                          <li>• Keep detailed logs of all activities</li>
                        </ul>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>
              </Tabs>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
