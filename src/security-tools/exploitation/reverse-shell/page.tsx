'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/src/ui/components/ui/card';
import { Button } from '@/src/ui/components/ui/button';
import { Input } from '@/src/ui/components/ui/input';
import { Label } from '@/src/ui/components/ui/label';
import { Textarea } from '@/src/ui/components/ui/textarea';
import { Badge } from '@/src/ui/components/ui/badge';
import { Alert, AlertDescription } from '@/src/ui/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/src/ui/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/src/ui/components/ui/select';
import { Loader2, Shield, AlertTriangle, Terminal, Code, Zap, Copy } from 'lucide-react';

interface ReverseShellResult {
  platform: string;
  shellType: string;
  payload: string;
  listenerCommand: string;
  description: string;
  usage: string[];
  alternatives: {
    name: string;
    payload: string;
    description: string;
  }[];
  tips: string[];
}

export default function ReverseShellGenerator() {
  const [lhost, setLhost] = useState('');
  const [lport, setLport] = useState('4444');
  const [platform, setPlatform] = useState('linux');
  const [shellType, setShellType] = useState('bash');
  const [results, setResults] = useState<ReverseShellResult | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleGenerate = async () => {
    if (!lhost.trim()) {
      setError('Please enter listener IP address');
      return;
    }

    if (!lport.trim() || isNaN(Number(lport))) {
      setError('Please enter a valid port number');
      return;
    }

    setLoading(true);
    setError('');
    setResults(null);

    try {
      const response = await fetch('/api/tools/revshell', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          lhost: lhost.trim(),
          lport: parseInt(lport),
          platform,
          shellType,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate reverse shell payload');
      }

      const data = await response.json();
      setResults(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-6xl">
      <div className="mb-8">
        <h1 className="text-4xl font-bold mb-4 flex items-center gap-3">
          <Terminal className="text-green-600" />
          Reverse Shell Generator
        </h1>
        <p className="text-lg text-muted-foreground">
          Multi-platform reverse shell payload generator for penetration testing
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Zap className="w-5 h-5" />
              Shell Configuration
            </CardTitle>
            <CardDescription>
              Configure your reverse shell payload parameters
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="lhost">Listener IP Address (LHOST)</Label>
              <Input
                id="lhost"
                placeholder="192.168.1.100"
                value={lhost}
                onChange={(e) => setLhost(e.target.value)}
              />
            </div>

            <div>
              <Label htmlFor="lport">Listener Port (LPORT)</Label>
              <Input
                id="lport"
                placeholder="4444"
                value={lport}
                onChange={(e) => setLport(e.target.value)}
              />
            </div>

            <div>
              <Label htmlFor="platform">Target Platform</Label>
              <Select value={platform} onValueChange={setPlatform}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="linux">Linux</SelectItem>
                  <SelectItem value="windows">Windows</SelectItem>
                  <SelectItem value="macos">macOS</SelectItem>
                  <SelectItem value="android">Android</SelectItem>
                  <SelectItem value="web">Web/Browser</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="shellType">Shell Type</Label>
              <Select value={shellType} onValueChange={setShellType}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {platform === 'linux' && (
                    <>
                      <SelectItem value="bash">Bash</SelectItem>
                      <SelectItem value="netcat">Netcat</SelectItem>
                      <SelectItem value="python">Python</SelectItem>
                      <SelectItem value="perl">Perl</SelectItem>
                      <SelectItem value="php">PHP</SelectItem>
                      <SelectItem value="ruby">Ruby</SelectItem>
                      <SelectItem value="socat">Socat</SelectItem>
                    </>
                  )}
                  {platform === 'windows' && (
                    <>
                      <SelectItem value="powershell">PowerShell</SelectItem>
                      <SelectItem value="cmd">Command Prompt</SelectItem>
                      <SelectItem value="python">Python</SelectItem>
                      <SelectItem value="netcat">Netcat</SelectItem>
                    </>
                  )}
                  {platform === 'web' && (
                    <>
                      <SelectItem value="javascript">JavaScript</SelectItem>
                      <SelectItem value="nodejs">Node.js</SelectItem>
                      <SelectItem value="php">PHP</SelectItem>
                    </>
                  )}
                  {(platform === 'macos' || platform === 'android') && (
                    <>
                      <SelectItem value="bash">Bash</SelectItem>
                      <SelectItem value="python">Python</SelectItem>
                      <SelectItem value="netcat">Netcat</SelectItem>
                    </>
                  )}
                </SelectContent>
              </Select>
            </div>

            <Button 
              onClick={handleGenerate} 
              disabled={loading}
              className="w-full"
            >
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating Payload...
                </>
              ) : (
                <>
                  <Shield className="mr-2 h-4 w-4" />
                  Generate Reverse Shell
                </>
              )}
            </Button>

            {error && (
              <Alert className="border-red-200 bg-red-50">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription className="text-red-800">
                  {error}
                </AlertDescription>
              </Alert>
            )}
          </CardContent>
        </Card>

        {results && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Terminal className="w-5 h-5" />
                Generated Payload
              </CardTitle>
              <CardDescription>
                {results.platform} {results.shellType} reverse shell
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Tabs defaultValue="payload" className="w-full">
                <TabsList className="grid w-full grid-cols-4">
                  <TabsTrigger value="payload">Payload</TabsTrigger>
                  <TabsTrigger value="listener">Listener</TabsTrigger>
                  <TabsTrigger value="alternatives">Alternatives</TabsTrigger>
                  <TabsTrigger value="tips">Tips</TabsTrigger>
                </TabsList>

                <TabsContent value="payload" className="space-y-4">
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-medium">Main Payload:</h4>
                      <Button
                        size="sm"
                        onClick={() => copyToClipboard(results.payload)}
                        className="h-8"
                      >
                        <Copy className="w-4 h-4 mr-1" />
                        Copy
                      </Button>
                    </div>
                    <div className="font-mono text-sm bg-gray-900 text-green-400 p-4 rounded-lg border overflow-x-auto">
                      {results.payload}
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">Description:</h4>
                    <p className="text-sm text-gray-600">{results.description}</p>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">Usage Instructions:</h4>
                    <div className="space-y-1">
                      {results.usage.map((instruction, index) => (
                        <div key={index} className="text-sm bg-blue-50 p-2 rounded border-l-4 border-blue-400">
                          {instruction}
                        </div>
                      ))}
                    </div>
                  </div>
                </TabsContent>

                <TabsContent value="listener" className="space-y-4">
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-medium">Listener Command:</h4>
                      <Button
                        size="sm"
                        onClick={() => copyToClipboard(results.listenerCommand)}
                        className="h-8"
                      >
                        <Copy className="w-4 h-4 mr-1" />
                        Copy
                      </Button>
                    </div>
                    <div className="font-mono text-sm bg-gray-900 text-green-400 p-4 rounded-lg border">
                      {results.listenerCommand}
                    </div>
                  </div>

                  <Alert>
                    <Terminal className="h-4 w-4" />
                    <AlertDescription>
                      Run this command on your attacking machine to set up the listener before executing the payload on the target.
                    </AlertDescription>
                  </Alert>
                </TabsContent>

                <TabsContent value="alternatives" className="space-y-4">
                  {results.alternatives.map((alt, index) => (
                    <div key={index} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium">{alt.name}:</h4>
                        <Button
                          size="sm"
                          onClick={() => copyToClipboard(alt.payload)}
                          className="h-8"
                        >
                          <Copy className="w-4 h-4 mr-1" />
                          Copy
                        </Button>
                      </div>
                      <div className="font-mono text-sm bg-gray-100 p-3 rounded mb-2 overflow-x-auto">
                        {alt.payload}
                      </div>
                      <p className="text-sm text-gray-600">{alt.description}</p>
                    </div>
                  ))}
                </TabsContent>

                <TabsContent value="tips" className="space-y-4">
                  {results.tips.map((tip, index) => (
                    <Alert key={index}>
                      <Shield className="h-4 w-4" />
                      <AlertDescription>{tip}</AlertDescription>
                    </Alert>
                  ))}
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>
        )}
      </div>

      {/* Educational Information */}
      <Card className="mt-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Code className="w-5 h-5" />
            Reverse Shell Security Information
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-semibold mb-2">Legal Usage:</h4>
              <ul className="space-y-1 text-sm">
                <li>• <strong>Authorized Penetration Testing:</strong> Only on systems you own or have explicit permission to test</li>
                <li>• <strong>Red Team Exercises:</strong> With proper authorization and documentation</li>
                <li>• <strong>Security Research:</strong> In controlled lab environments</li>
                <li>• <strong>Educational Purposes:</strong> Learning cybersecurity concepts</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-2">Detection & Prevention:</h4>
              <ul className="space-y-1 text-sm">
                <li>• Network monitoring and intrusion detection systems</li>
                <li>• Endpoint detection and response (EDR) solutions</li>
                <li>• Firewall rules blocking outbound connections</li>
                <li>• Application whitelisting and execution policies</li>
                <li>• Regular security awareness training</li>
              </ul>
            </div>
          </div>
          
          <Alert className="mt-4 border-yellow-200 bg-yellow-50">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription className="text-yellow-800">
              <strong>Warning:</strong> This tool is intended for authorized security testing only. 
              Unauthorized use of reverse shells is illegal and unethical. Always ensure you have 
              proper authorization before testing any systems.
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    </div>
  );
}
