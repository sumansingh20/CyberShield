"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/src/ui/components/ui/card"
import { Button } from "@/src/ui/components/ui/button"
import { Input } from "@/src/ui/components/ui/input"
import { Label } from "@/src/ui/components/ui/label"
import { Textarea } from "@/src/ui/components/ui/textarea"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/src/ui/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/src/ui/components/ui/select"
import { Badge } from "@/src/ui/components/ui/badge"
import { AlertTriangle, Search, Database, ExternalLink, Copy, ArrowLeft, Shield, Zap, Bug, Star } from "lucide-react"
import Link from "next/link"

interface Exploit {
  id: string
  cve_id: string
  title: string
  description: string
  date: string
  author: string
  type: string
  platform: string
  verified: boolean
  severity: string
  cvss_score: number
  affected_software: string[]
  exploit_code: string
  references: string[]
  tags: string[]
  download_count: number
  rating: number
}

interface SearchResult {
  query: string
  search_type: string
  total_results: number
  exploits: Exploit[]
  filters_applied: {
    platform?: string
    type?: string
    severity?: string
    verified_only?: boolean
  }
  search_time: number
  timestamp: string
}

export default function ExploitDatabasePage() {
  const [query, setQuery] = useState("")
  const [searchType, setSearchType] = useState("keyword")
  const [platform, setPlatform] = useState("")
  const [exploitType, setExploitType] = useState("")
  const [severity, setSeverity] = useState("")
  const [verifiedOnly, setVerifiedOnly] = useState(false)
  const [result, setResult] = useState<SearchResult | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState("")
  const [selectedExploit, setSelectedExploit] = useState<Exploit | null>(null)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError("")
    setResult(null)
    setSelectedExploit(null)

    try {
      const response = await fetch("/api/tools/exploit-database", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          query: query.trim(),
          search_type: searchType,
          platform: platform || null,
          exploit_type: exploitType || null,
          severity: severity || null,
          verified_only: verifiedOnly
        })
      })

      const data = await response.json()
      
      if (!response.ok) {
        throw new Error(data.error || "Search failed")
      }

      setResult(data)
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred")
    } finally {
      setIsLoading(false)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "critical": return "text-red-500 bg-red-500/10"
      case "high": return "text-orange-500 bg-orange-500/10"
      case "medium": return "text-yellow-500 bg-yellow-500/10"
      case "low": return "text-blue-500 bg-blue-500/10"
      default: return "text-gray-500 bg-gray-500/10"
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type.toLowerCase()) {
      case "remote": return <Zap className="h-4 w-4" />
      case "local": return <Shield className="h-4 w-4" />
      case "web application": return <Database className="h-4 w-4" />
      case "denial of service": return <AlertTriangle className="h-4 w-4" />
      default: return <Bug className="h-4 w-4" />
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 p-4">
      <div className="container mx-auto max-w-7xl">
        <div className="mb-8 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Link href="/tools">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Tools
              </Button>
            </Link>
            <div>
              <h1 className="text-4xl font-bold text-white">Exploit Database Search</h1>
              <p className="text-slate-300 mt-2">
                Search CVE database and exploit repository for security vulnerabilities
              </p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Search Form */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Database className="h-5 w-5" />
                  Search Configuration
                </CardTitle>
                <CardDescription>
                  Search for exploits, CVEs, and security advisories
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-4">
                  <div>
                    <Label htmlFor="query">Search Query</Label>
                    <Input
                      id="query"
                      value={query}
                      onChange={(e) => setQuery(e.target.value)}
                      placeholder="CVE-2024-1234, Apache, buffer overflow..."
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="searchType">Search Type</Label>
                    <Select value={searchType} onValueChange={setSearchType}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select search type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="keyword">Keyword Search</SelectItem>
                        <SelectItem value="cve">CVE Number</SelectItem>
                        <SelectItem value="software">Software Product</SelectItem>
                        <SelectItem value="author">Author/Researcher</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="platform">Platform</Label>
                    <Select value={platform} onValueChange={setPlatform}>
                      <SelectTrigger>
                        <SelectValue placeholder="All platforms" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="">All Platforms</SelectItem>
                        <SelectItem value="windows">Windows</SelectItem>
                        <SelectItem value="linux">Linux</SelectItem>
                        <SelectItem value="macos">macOS</SelectItem>
                        <SelectItem value="web">Web Application</SelectItem>
                        <SelectItem value="mobile">Mobile</SelectItem>
                        <SelectItem value="hardware">Hardware</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="exploitType">Exploit Type</Label>
                    <Select value={exploitType} onValueChange={setExploitType}>
                      <SelectTrigger>
                        <SelectValue placeholder="All types" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="">All Types</SelectItem>
                        <SelectItem value="remote">Remote Code Execution</SelectItem>
                        <SelectItem value="local">Local Privilege Escalation</SelectItem>
                        <SelectItem value="web">Web Application</SelectItem>
                        <SelectItem value="dos">Denial of Service</SelectItem>
                        <SelectItem value="info">Information Disclosure</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="severity">Severity</Label>
                    <Select value={severity} onValueChange={setSeverity}>
                      <SelectTrigger>
                        <SelectValue placeholder="All severities" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="">All Severities</SelectItem>
                        <SelectItem value="critical">Critical (9.0-10.0)</SelectItem>
                        <SelectItem value="high">High (7.0-8.9)</SelectItem>
                        <SelectItem value="medium">Medium (4.0-6.9)</SelectItem>
                        <SelectItem value="low">Low (0.1-3.9)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="verified"
                      checked={verifiedOnly}
                      onChange={(e) => setVerifiedOnly(e.target.checked)}
                      className="rounded"
                    />
                    <Label htmlFor="verified">Verified exploits only</Label>
                  </div>

                  <div className="bg-orange-500/10 border border-orange-500/20 rounded-lg p-4">
                    <div className="flex items-center gap-2 text-orange-500 mb-2">
                      <AlertTriangle className="h-4 w-4" />
                      <span className="font-semibold">Educational Use Only</span>
                    </div>
                    <p className="text-sm text-orange-400">
                      This tool is for educational and authorized testing purposes only. 
                      Using exploits against systems without permission is illegal.
                    </p>
                  </div>

                  <Button type="submit" className="w-full" disabled={isLoading}>
                    {isLoading ? "Searching..." : "Search Exploits"}
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>

          {/* Results */}
          <div className="lg:col-span-2 space-y-6">
            {error && (
              <Card className="border-red-500/20 bg-red-500/10">
                <CardContent className="pt-6">
                  <div className="flex items-center gap-2 text-red-500">
                    <AlertTriangle className="h-4 w-4" />
                    <span className="font-semibold">Search Error</span>
                  </div>
                  <p className="mt-2 text-red-400">{error}</p>
                </CardContent>
              </Card>
            )}

            {isLoading && (
              <Card>
                <CardContent className="pt-6">
                  <div className="flex items-center gap-2 mb-4">
                    <Search className="h-4 w-4 animate-pulse" />
                    <span>Searching exploit database...</span>
                  </div>
                  <p className="text-sm text-gray-500">
                    Searching across multiple vulnerability databases and repositories
                  </p>
                </CardContent>
              </Card>
            )}

            {result && (
              <Tabs defaultValue="results" className="w-full">
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="results">Results ({result.total_results})</TabsTrigger>
                  <TabsTrigger value="details">Exploit Details</TabsTrigger>
                </TabsList>

                <TabsContent value="results" className="space-y-4">
                  <Card>
                    <CardHeader>
                      <CardTitle>Search Results</CardTitle>
                      <CardDescription>
                        Found {result.total_results} exploits in {result.search_time}ms
                      </CardDescription>
                    </CardHeader>
                  </Card>

                  <div className="space-y-4">
                    {result.exploits.map((exploit) => (
                      <Card 
                        key={exploit.id} 
                        className="cursor-pointer hover:bg-slate-50 dark:hover:bg-slate-800 transition-colors"
                        onClick={() => setSelectedExploit(exploit)}
                      >
                        <CardHeader className="pb-3">
                          <div className="flex justify-between items-start">
                            <div className="flex-1">
                              <CardTitle className="flex items-center gap-2 text-lg">
                                {getTypeIcon(exploit.type)}
                                {exploit.title}
                                {exploit.verified && (
                                  <Badge className="bg-green-500/10 text-green-500">
                                    Verified
                                  </Badge>
                                )}
                              </CardTitle>
                              <CardDescription className="flex items-center gap-4 mt-1">
                                <span className="flex items-center gap-1">
                                  <Database className="h-3 w-3" />
                                  {exploit.cve_id}
                                </span>
                                <span>{exploit.date}</span>
                                <span>by {exploit.author}</span>
                              </CardDescription>
                            </div>
                            <div className="flex items-center gap-2">
                              <Badge className={getSeverityColor(exploit.severity)}>
                                {exploit.severity.toUpperCase()}
                              </Badge>
                              <div className="flex items-center gap-1 text-sm text-gray-500">
                                <Star className="h-3 w-3" />
                                {exploit.rating}
                              </div>
                            </div>
                          </div>
                        </CardHeader>
                        <CardContent>
                          <p className="text-sm text-gray-600 dark:text-gray-300 mb-3">
                            {exploit.description}
                          </p>
                          
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-4 text-sm text-gray-500">
                              <span>CVSS: {exploit.cvss_score}/10</span>
                              <span>Platform: {exploit.platform}</span>
                              <span>Downloads: {exploit.download_count}</span>
                            </div>
                            
                            <div className="flex gap-2">
                              {exploit.tags.slice(0, 3).map((tag, index) => (
                                <Badge key={index} variant="secondary" className="text-xs">
                                  {tag}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </TabsContent>

                <TabsContent value="details" className="space-y-4">
                  {selectedExploit ? (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                          {getTypeIcon(selectedExploit.type)}
                          {selectedExploit.title}
                        </CardTitle>
                        <CardDescription>
                          {selectedExploit.cve_id} • {selectedExploit.date} • by {selectedExploit.author}
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-6">
                        <div>
                          <h4 className="font-semibold mb-2">Description</h4>
                          <p className="text-sm text-gray-600 dark:text-gray-300">
                            {selectedExploit.description}
                          </p>
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <h4 className="font-semibold mb-2">Severity</h4>
                            <Badge className={getSeverityColor(selectedExploit.severity)}>
                              {selectedExploit.severity.toUpperCase()} ({selectedExploit.cvss_score}/10)
                            </Badge>
                          </div>
                          <div>
                            <h4 className="font-semibold mb-2">Type</h4>
                            <Badge variant="secondary">{selectedExploit.type}</Badge>
                          </div>
                        </div>

                        <div>
                          <h4 className="font-semibold mb-2">Affected Software</h4>
                          <div className="flex flex-wrap gap-2">
                            {selectedExploit.affected_software.map((software, index) => (
                              <Badge key={index} variant="outline" className="text-xs">
                                {software}
                              </Badge>
                            ))}
                          </div>
                        </div>

                        <div>
                          <h4 className="font-semibold mb-2 flex items-center gap-2">
                            Exploit Code
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => copyToClipboard(selectedExploit.exploit_code)}
                            >
                              <Copy className="h-3 w-3" />
                            </Button>
                          </h4>
                          <Textarea
                            value={selectedExploit.exploit_code}
                            readOnly
                            className="font-mono text-sm min-h-[200px]"
                          />
                        </div>

                        <div>
                          <h4 className="font-semibold mb-2">References</h4>
                          <div className="space-y-1">
                            {selectedExploit.references.map((ref, index) => (
                              <div key={index} className="flex items-center gap-2">
                                <ExternalLink className="h-3 w-3 text-blue-500" />
                                <a 
                                  href={ref} 
                                  target="_blank" 
                                  rel="noopener noreferrer"
                                  className="text-blue-500 hover:underline text-sm"
                                >
                                  {ref}
                                </a>
                              </div>
                            ))}
                          </div>
                        </div>

                        <div>
                          <h4 className="font-semibold mb-2">Tags</h4>
                          <div className="flex flex-wrap gap-2">
                            {selectedExploit.tags.map((tag, index) => (
                              <Badge key={index} variant="secondary" className="text-xs">
                                {tag}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ) : (
                    <Card>
                      <CardContent className="pt-6 text-center">
                        <Database className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                        <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                          Select an Exploit
                        </h3>
                        <p className="text-gray-500 dark:text-gray-400">
                          Click on any exploit from the results to view detailed information
                        </p>
                      </CardContent>
                    </Card>
                  )}
                </TabsContent>
              </Tabs>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
