'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/src/ui/components/ui/card';
import { Button } from '@/src/ui/components/ui/button';
import { Input } from '@/src/ui/components/ui/input';
import { Label } from '@/src/ui/components/ui/label';
import { Textarea } from '@/src/ui/components/ui/textarea';
import { Badge } from '@/src/ui/components/ui/badge';
import { Alert, AlertDescription } from '@/src/ui/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/src/ui/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/src/ui/components/ui/select';
import { Loader2, Shield, AlertTriangle, Key, Lock, Zap } from 'lucide-react';

interface PasswordCrackResult {
  hashType: string;
  crackingMethod: string;
  attempts: number;
  cracked: boolean;
  password?: string;
  timeElapsed: string;
  strengthAnalysis: {
    length: number;
    hasUppercase: boolean;
    hasLowercase: boolean;
    hasNumbers: boolean;
    hasSymbols: boolean;
    strength: 'Very Weak' | 'Weak' | 'Medium' | 'Strong' | 'Very Strong';
    score: number;
  };
  recommendations: string[];
  commonPatterns: string[];
}

export default function PasswordCrackingTool() {
  const [hashInput, setHashInput] = useState('');
  const [hashType, setHashType] = useState('auto-detect');
  const [crackingMethod, setCrackingMethod] = useState('dictionary');
  const [customWordlist, setCustomWordlist] = useState('');
  const [results, setResults] = useState<PasswordCrackResult | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleCrack = async () => {
    if (!hashInput.trim()) {
      setError('Please enter a hash to crack');
      return;
    }

    setLoading(true);
    setError('');
    setResults(null);

    try {
      const response = await fetch('/api/tools/password-cracking', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          hash: hashInput.trim(),
          hashType,
          crackingMethod,
          customWordlist: customWordlist.trim(),
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to crack password hash');
      }

      const data = await response.json();
      setResults(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const getStrengthColor = (strength: string) => {
    switch (strength) {
      case 'Very Strong': return 'bg-green-100 text-green-800 border-green-200';
      case 'Strong': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'Medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'Weak': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'Very Weak': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-6xl">
      <div className="mb-8">
        <h1 className="text-4xl font-bold mb-4 flex items-center gap-3">
          <Key className="text-yellow-600" />
          Password Cracking Tool
        </h1>
        <p className="text-lg text-muted-foreground">
          Advanced hash cracking and password analysis with rainbow tables and dictionary attacks
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Zap className="w-5 h-5" />
              Hash Cracking Configuration
            </CardTitle>
            <CardDescription>
              Configure your password hash cracking attempt
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="hashInput">Password Hash</Label>
              <Textarea
                id="hashInput"
                placeholder="5d41402abc4b2a76b9719d911017c592 (MD5 example)"
                value={hashInput}
                onChange={(e) => setHashInput(e.target.value)}
                rows={3}
              />
            </div>

            <div>
              <Label htmlFor="hashType">Hash Type</Label>
              <Select value={hashType} onValueChange={setHashType}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="auto-detect">Auto Detect</SelectItem>
                  <SelectItem value="md5">MD5</SelectItem>
                  <SelectItem value="sha1">SHA-1</SelectItem>
                  <SelectItem value="sha256">SHA-256</SelectItem>
                  <SelectItem value="sha512">SHA-512</SelectItem>
                  <SelectItem value="bcrypt">bcrypt</SelectItem>
                  <SelectItem value="ntlm">NTLM</SelectItem>
                  <SelectItem value="mysql">MySQL</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="crackingMethod">Cracking Method</Label>
              <Select value={crackingMethod} onValueChange={setCrackingMethod}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="dictionary">Dictionary Attack</SelectItem>
                  <SelectItem value="brute-force">Brute Force</SelectItem>
                  <SelectItem value="hybrid">Hybrid Attack</SelectItem>
                  <SelectItem value="rainbow-tables">Rainbow Tables</SelectItem>
                  <SelectItem value="rule-based">Rule-based Attack</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {crackingMethod === 'dictionary' && (
              <div>
                <Label htmlFor="customWordlist">Custom Wordlist (optional)</Label>
                <Textarea
                  id="customWordlist"
                  placeholder="password&#10;123456&#10;admin&#10;qwerty"
                  value={customWordlist}
                  onChange={(e) => setCustomWordlist(e.target.value)}
                  rows={4}
                />
              </div>
            )}

            <Button 
              onClick={handleCrack} 
              disabled={loading}
              className="w-full"
            >
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Cracking Password Hash...
                </>
              ) : (
                <>
                  <Shield className="mr-2 h-4 w-4" />
                  Start Password Cracking
                </>
              )}
            </Button>

            {error && (
              <Alert className="border-red-200 bg-red-50">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription className="text-red-800">
                  {error}
                </AlertDescription>
              </Alert>
            )}
          </CardContent>
        </Card>

        {results && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Lock className="w-5 h-5" />
                Cracking Results
              </CardTitle>
              <CardDescription>
                Password hash analysis completed
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Tabs defaultValue="results" className="w-full">
                <TabsList className="grid w-full grid-cols-3">
                  <TabsTrigger value="results">Results</TabsTrigger>
                  <TabsTrigger value="analysis">Analysis</TabsTrigger>
                  <TabsTrigger value="recommendations">Security</TabsTrigger>
                </TabsList>

                <TabsContent value="results" className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="text-center p-4 bg-gray-50 rounded-lg">
                      <div className="text-lg font-bold text-blue-600">
                        {results.hashType}
                      </div>
                      <div className="text-sm text-gray-600">Hash Type</div>
                    </div>
                    <div className="text-center p-4 bg-gray-50 rounded-lg">
                      <div className="text-lg font-bold text-purple-600">
                        {results.attempts.toLocaleString()}
                      </div>
                      <div className="text-sm text-gray-600">Attempts</div>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="font-medium">Cracking Status:</span>
                      <Badge className={results.cracked ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>
                        {results.cracked ? 'CRACKED' : 'NOT CRACKED'}
                      </Badge>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <span className="font-medium">Method Used:</span>
                      <Badge className="bg-blue-100 text-blue-800">
                        {results.crackingMethod}
                      </Badge>
                    </div>

                    <div className="flex items-center justify-between">
                      <span className="font-medium">Time Elapsed:</span>
                      <Badge className="bg-gray-100 text-gray-800">
                        {results.timeElapsed}
                      </Badge>
                    </div>
                  </div>

                  {results.cracked && results.password && (
                    <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                      <h4 className="font-semibold text-green-800 mb-2">🔓 Password Cracked!</h4>
                      <div className="font-mono text-lg bg-white p-3 rounded border">
                        {results.password}
                      </div>
                    </div>
                  )}

                  {results.commonPatterns.length > 0 && (
                    <div>
                      <h4 className="font-medium mb-2">Common Patterns Detected:</h4>
                      <div className="flex flex-wrap gap-2">
                        {results.commonPatterns.map((pattern, index) => (
                          <Badge key={index} className="bg-yellow-100 text-yellow-800">
                            {pattern}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  )}
                </TabsContent>

                <TabsContent value="analysis" className="space-y-4">
                  {results.cracked && results.password && (
                    <>
                      <div className="grid grid-cols-2 gap-4">
                        <div className="text-center p-4 bg-gray-50 rounded-lg">
                          <div className="text-2xl font-bold text-blue-600">
                            {results.strengthAnalysis.length}
                          </div>
                          <div className="text-sm text-gray-600">Characters</div>
                        </div>
                        <div className="text-center p-4 bg-gray-50 rounded-lg">
                          <div className="text-2xl font-bold text-purple-600">
                            {results.strengthAnalysis.score}/100
                          </div>
                          <div className="text-sm text-gray-600">Strength Score</div>
                        </div>
                      </div>

                      <div className="space-y-2">
                        <div className="flex items-center justify-between">
                          <span className="font-medium">Password Strength:</span>
                          <Badge className={getStrengthColor(results.strengthAnalysis.strength)}>
                            {results.strengthAnalysis.strength}
                          </Badge>
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <h4 className="font-medium mb-2">Character Types:</h4>
                          <div className="space-y-1 text-sm">
                            <div className="flex items-center justify-between">
                              <span>Uppercase Letters:</span>
                              <Badge className={results.strengthAnalysis.hasUppercase ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>
                                {results.strengthAnalysis.hasUppercase ? 'Yes' : 'No'}
                              </Badge>
                            </div>
                            <div className="flex items-center justify-between">
                              <span>Lowercase Letters:</span>
                              <Badge className={results.strengthAnalysis.hasLowercase ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>
                                {results.strengthAnalysis.hasLowercase ? 'Yes' : 'No'}
                              </Badge>
                            </div>
                            <div className="flex items-center justify-between">
                              <span>Numbers:</span>
                              <Badge className={results.strengthAnalysis.hasNumbers ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>
                                {results.strengthAnalysis.hasNumbers ? 'Yes' : 'No'}
                              </Badge>
                            </div>
                            <div className="flex items-center justify-between">
                              <span>Symbols:</span>
                              <Badge className={results.strengthAnalysis.hasSymbols ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>
                                {results.strengthAnalysis.hasSymbols ? 'Yes' : 'No'}
                              </Badge>
                            </div>
                          </div>
                        </div>
                      </div>
                    </>
                  )}
                </TabsContent>

                <TabsContent value="recommendations" className="space-y-4">
                  {results.recommendations.map((rec, index) => (
                    <Alert key={index}>
                      <Shield className="h-4 w-4" />
                      <AlertDescription>{rec}</AlertDescription>
                    </Alert>
                  ))}
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>
        )}
      </div>

      {/* Educational Information */}
      <Card className="mt-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Key className="w-5 h-5" />
            Password Security Guidelines
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-semibold mb-2">Strong Password Requirements:</h4>
              <ul className="space-y-1 text-sm">
                <li>• Minimum 12+ characters length</li>
                <li>• Mix of uppercase and lowercase letters</li>
                <li>• Include numbers and special symbols</li>
                <li>• Avoid common words and patterns</li>
                <li>• Use unique passwords for each account</li>
                <li>• Consider using passphrases</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-2">Hash Security Best Practices:</h4>
              <ul className="space-y-1 text-sm">
                <li>• Use strong hashing algorithms (bcrypt, Argon2)</li>
                <li>• Always use salt for password hashing</li>
                <li>• Implement proper key stretching</li>
                <li>• Avoid fast hashing algorithms (MD5, SHA-1)</li>
                <li>• Implement rate limiting for login attempts</li>
                <li>• Use multi-factor authentication</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
