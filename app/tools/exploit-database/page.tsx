"use client"

import React, { useState } from 'react'
import { Button } from "@/src/ui/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/src/ui/components/ui/card"
import { Input } from "@/src/ui/components/ui/input"
import { Label } from "@/src/ui/components/ui/label"
import { Badge } from "@/src/ui/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/src/ui/components/ui/tabs"
import { Alert, AlertDescription } from "@/src/ui/components/ui/alert"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/src/ui/components/ui/select"
import { 
  Database, 
  Search,
  ExternalLink,
  Copy,
  AlertTriangle, 
  Shield, 
  Eye,
  Terminal,
  ArrowLeft,
  RefreshCw,
  Target,
  Activity,
  Calendar,
  User,
  FileText,
  Bug
} from 'lucide-react'
import Link from 'next/link'

interface ExploitSearchResult {
  totalResults: number;
  exploits: {
    id: string;
    title: string;
    description: string;
    type: string;
    platform: string;
    author: string;
    date: string;
    cve: string[];
    severity: 'Critical' | 'High' | 'Medium' | 'Low';
    verified: boolean;
    url: string;
    tags: string[];
    code?: string;
  }[];
  vulnerabilities: {
    cve: string;
    description: string;
    cvss: number;
    published: string;
    modified: string;
    references: string[];
    affected: string[];
  }[];
  searchStats: {
    timeElapsed: string;
    databasesSearched: string[];
    totalExploits: number;
    totalCVEs: number;
  };
  recommendations: string[];
  summary: string;
}

export default function ExploitDatabaseSearchPage() {
  const [searchQuery, setSearchQuery] = useState('')
  const [searchType, setSearchType] = useState('keyword')
  const [platform, setPlatform] = useState('all')
  const [exploitType, setExploitType] = useState('all')
  const [dateRange, setDateRange] = useState('all')
  const [verifiedOnly, setVerifiedOnly] = useState(false)
  const [includeCVE, setIncludeCVE] = useState(true)
  const [results, setResults] = useState<ExploitSearchResult | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setError('Please enter a search term')
      return
    }

    setLoading(true)
    setError(null)
    setResults(null)

    try {
      const response = await fetch('/api/tools/exploit-database', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          searchQuery: searchQuery.trim(),
          searchType,
          platform,
          exploitType,
          dateRange,
          verifiedOnly,
          includeCVE,
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to search exploit database')
      }

      const data = await response.json()
      
      if (data.success && data.data) {
        setResults(data.data)
      } else {
        throw new Error(data.message || 'Exploit search failed')
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred')
    } finally {
      setLoading(false)
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'Critical': return 'bg-red-500 text-white'
      case 'High': return 'bg-orange-500 text-white'
      case 'Medium': return 'bg-yellow-500 text-black'
      case 'Low': return 'bg-blue-500 text-white'
      default: return 'bg-gray-500 text-white'
    }
  }

  const getCVSSColor = (score: number) => {
    if (score >= 9.0) return 'text-red-400'
    if (score >= 7.0) return 'text-orange-400'
    if (score >= 4.0) return 'text-yellow-400'
    return 'text-blue-400'
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text).then(() => {
      // Could add a toast notification here
    })
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-red-900 to-slate-900 p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="flex items-center gap-4 mb-8">
          <Link href="/tools" className="p-2 hover:bg-white/10 rounded-lg transition-colors">
            <ArrowLeft className="w-5 h-5 text-white" />
          </Link>
          <div>
            <h1 className="text-3xl font-bold text-white mb-2">Exploit Database Search</h1>
            <p className="text-gray-300">
              Search CVE database and exploit repository for security vulnerabilities
            </p>
          </div>
        </div>

        {/* Search Form */}
        <Card className="mb-6 bg-slate-800/50 backdrop-blur-sm border-slate-700">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-white">
              <Database className="w-5 h-5" />
              Exploit Database Search
            </CardTitle>
            <CardDescription className="text-gray-300">
              Search for exploits, vulnerabilities, and CVE information
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="searchQuery" className="text-gray-200">Search Query</Label>
                <Input
                  id="searchQuery"
                  placeholder="CVE-2024-1234, Apache, RCE, buffer overflow"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="bg-slate-700 border-slate-600 text-white placeholder-gray-400"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="searchType" className="text-gray-200">Search Type</Label>
                <Select value={searchType} onValueChange={setSearchType}>
                  <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-700 border-slate-600">
                    <SelectItem value="keyword">Keyword Search</SelectItem>
                    <SelectItem value="cve">CVE Number</SelectItem>
                    <SelectItem value="title">Title Search</SelectItem>
                    <SelectItem value="author">Author Search</SelectItem>
                    <SelectItem value="tag">Tag Search</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid md:grid-cols-3 gap-4">
              <div className="space-y-2">
                <Label htmlFor="platform" className="text-gray-200">Platform</Label>
                <Select value={platform} onValueChange={setPlatform}>
                  <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-700 border-slate-600">
                    <SelectItem value="all">All Platforms</SelectItem>
                    <SelectItem value="windows">Windows</SelectItem>
                    <SelectItem value="linux">Linux</SelectItem>
                    <SelectItem value="macos">macOS</SelectItem>
                    <SelectItem value="web">Web Application</SelectItem>
                    <SelectItem value="hardware">Hardware</SelectItem>
                    <SelectItem value="mobile">Mobile</SelectItem>
                    <SelectItem value="multiple">Multiple</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="exploitType" className="text-gray-200">Exploit Type</Label>
                <Select value={exploitType} onValueChange={setExploitType}>
                  <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-700 border-slate-600">
                    <SelectItem value="all">All Types</SelectItem>
                    <SelectItem value="remote">Remote</SelectItem>
                    <SelectItem value="local">Local</SelectItem>
                    <SelectItem value="web">Web Application</SelectItem>
                    <SelectItem value="dos">Denial of Service</SelectItem>
                    <SelectItem value="code_execution">Code Execution</SelectItem>
                    <SelectItem value="privilege_escalation">Privilege Escalation</SelectItem>
                    <SelectItem value="sql_injection">SQL Injection</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="dateRange" className="text-gray-200">Date Range</Label>
                <Select value={dateRange} onValueChange={setDateRange}>
                  <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-700 border-slate-600">
                    <SelectItem value="all">All Time</SelectItem>
                    <SelectItem value="last_week">Last Week</SelectItem>
                    <SelectItem value="last_month">Last Month</SelectItem>
                    <SelectItem value="last_year">Last Year</SelectItem>
                    <SelectItem value="last_5_years">Last 5 Years</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-4">
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="verifiedOnly"
                  checked={verifiedOnly}
                  onChange={(e) => setVerifiedOnly(e.target.checked)}
                  className="rounded"
                  aria-label="Show only verified exploits"
                />
                <Label htmlFor="verifiedOnly" className="text-gray-200">
                  Verified Exploits Only
                </Label>
              </div>

              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="includeCVE"
                  checked={includeCVE}
                  onChange={(e) => setIncludeCVE(e.target.checked)}
                  className="rounded"
                  aria-label="Include CVE information"
                />
                <Label htmlFor="includeCVE" className="text-gray-200">
                  Include CVE Information
                </Label>
              </div>
            </div>

            <Button 
              onClick={handleSearch}
              disabled={loading}
              className="w-full bg-red-600 hover:bg-red-700"
            >
              {loading ? (
                <>
                  <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                  Searching Database...
                </>
              ) : (
                <>
                  <Search className="w-4 h-4 mr-2" />
                  Search Exploit Database
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {/* Error Display */}
        {error && (
          <Alert className="mb-6 bg-red-900/50 border-red-500 text-red-200">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* Results */}
        {results && (
          <div className="space-y-6">
            {/* Summary Card */}
            <Card className="bg-slate-800/50 backdrop-blur-sm border-slate-700">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-white">
                  <Target className="w-5 h-5" />
                  Search Results Summary
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                  <div className="text-center p-4 bg-slate-700/50 rounded-lg">
                    <div className="text-2xl font-bold text-red-400">
                      {results.exploits.length}
                    </div>
                    <div className="text-sm text-gray-300">Exploits Found</div>
                  </div>
                  <div className="text-center p-4 bg-slate-700/50 rounded-lg">
                    <div className="text-2xl font-bold text-blue-400">
                      {results.vulnerabilities.length}
                    </div>
                    <div className="text-sm text-gray-300">CVEs Found</div>
                  </div>
                  <div className="text-center p-4 bg-slate-700/50 rounded-lg">
                    <div className="text-2xl font-bold text-green-400">
                      {results.exploits.filter(e => e.verified).length}
                    </div>
                    <div className="text-sm text-gray-300">Verified</div>
                  </div>
                  <div className="text-center p-4 bg-slate-700/50 rounded-lg">
                    <div className="text-2xl font-bold text-purple-400">
                      {results.searchStats.timeElapsed}
                    </div>
                    <div className="text-sm text-gray-300">Search Time</div>
                  </div>
                </div>

                <div className="mb-4">
                  <h3 className="text-lg font-semibold text-white mb-2">Search Summary</h3>
                  <p className="text-gray-300">{results.summary}</p>
                </div>

                {/* Search Stats */}
                <div className="bg-slate-700/30 rounded-lg p-4">
                  <h4 className="font-medium text-white mb-3">Search Statistics</h4>
                  <div className="grid md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-300">Databases Searched:</span>
                      <div className="flex flex-wrap gap-1 mt-1">
                        {results.searchStats.databasesSearched.map((db, index) => (
                          <Badge key={index} variant="outline" className="text-blue-400 border-blue-400">
                            {db}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    <div>
                      <div className="space-y-1">
                        <div className="flex justify-between">
                          <span className="text-gray-300">Total Exploits:</span>
                          <span className="text-red-400">{results.searchStats.totalExploits.toLocaleString()}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-300">Total CVEs:</span>
                          <span className="text-blue-400">{results.searchStats.totalCVEs.toLocaleString()}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Detailed Results */}
            <Card className="bg-slate-800/50 backdrop-blur-sm border-slate-700">
              <CardHeader>
                <CardTitle className="text-white">Search Results</CardTitle>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="exploits" className="space-y-4">
                  <TabsList className="bg-slate-700">
                    <TabsTrigger value="exploits">Exploits</TabsTrigger>
                    <TabsTrigger value="cves">CVE Database</TabsTrigger>
                    <TabsTrigger value="recommendations">Recommendations</TabsTrigger>
                  </TabsList>

                  <TabsContent value="exploits" className="space-y-4">
                    {results.exploits.length > 0 ? (
                      results.exploits.map((exploit, index) => (
                        <Card key={index} className="bg-slate-700/30">
                          <CardHeader className="pb-3">
                            <div className="flex items-center justify-between">
                              <CardTitle className="text-lg text-white">{exploit.title}</CardTitle>
                              <div className="flex items-center gap-2">
                                {exploit.verified && (
                                  <Badge className="bg-green-500 text-white">
                                    Verified
                                  </Badge>
                                )}
                                <Badge className={getSeverityColor(exploit.severity)}>
                                  {exploit.severity}
                                </Badge>
                              </div>
                            </div>
                          </CardHeader>
                          <CardContent className="space-y-3">
                            <div>
                              <p className="text-gray-300 text-sm">{exploit.description}</p>
                            </div>
                            
                            <div className="grid md:grid-cols-2 gap-4 text-sm">
                              <div className="space-y-1">
                                <div className="flex justify-between">
                                  <span className="text-gray-400">ID:</span>
                                  <code className="text-green-400">{exploit.id}</code>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-gray-400">Type:</span>
                                  <span className="text-blue-400">{exploit.type}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-gray-400">Platform:</span>
                                  <span className="text-orange-400">{exploit.platform}</span>
                                </div>
                              </div>
                              <div className="space-y-1">
                                <div className="flex justify-between">
                                  <span className="text-gray-400">Author:</span>
                                  <span className="text-purple-400">{exploit.author}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-gray-400">Date:</span>
                                  <span className="text-yellow-400">{exploit.date}</span>
                                </div>
                                {exploit.cve.length > 0 && (
                                  <div>
                                    <span className="text-gray-400">CVE:</span>
                                    <div className="flex flex-wrap gap-1 mt-1">
                                      {exploit.cve.map((cve, cveIndex) => (
                                        <Badge key={cveIndex} variant="outline" className="text-red-400 border-red-400 text-xs">
                                          {cve}
                                        </Badge>
                                      ))}
                                    </div>
                                  </div>
                                )}
                              </div>
                            </div>

                            {exploit.tags.length > 0 && (
                              <div>
                                <span className="text-sm text-gray-400 block mb-2">Tags:</span>
                                <div className="flex flex-wrap gap-1">
                                  {exploit.tags.map((tag, tagIndex) => (
                                    <Badge key={tagIndex} variant="outline" className="text-cyan-400 border-cyan-400 text-xs">
                                      {tag}
                                    </Badge>
                                  ))}
                                </div>
                              </div>
                            )}

                            <div className="flex items-center gap-2 pt-2">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => window.open(exploit.url, '_blank')}
                                className="text-gray-300 border-gray-600 hover:bg-slate-600"
                              >
                                <ExternalLink className="w-4 h-4 mr-2" />
                                View Details
                              </Button>
                              {exploit.code && (
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => copyToClipboard(exploit.code!)}
                                  className="text-gray-300 border-gray-600 hover:bg-slate-600"
                                >
                                  <Copy className="w-4 h-4 mr-2" />
                                  Copy Code
                                </Button>
                              )}
                            </div>
                          </CardContent>
                        </Card>
                      ))
                    ) : (
                      <div className="text-center py-8 text-gray-400">
                        <Bug className="w-12 h-12 mx-auto mb-4 text-gray-500" />
                        <p>No exploits found for your search criteria</p>
                      </div>
                    )}
                  </TabsContent>

                  <TabsContent value="cves" className="space-y-4">
                    {results.vulnerabilities.length > 0 ? (
                      results.vulnerabilities.map((cve, index) => (
                        <Card key={index} className="bg-slate-700/30">
                          <CardHeader className="pb-3">
                            <div className="flex items-center justify-between">
                              <CardTitle className="text-lg text-white">{cve.cve}</CardTitle>
                              <Badge className={`${getCVSSColor(cve.cvss)} bg-opacity-20 border`}>
                                CVSS {cve.cvss}
                              </Badge>
                            </div>
                          </CardHeader>
                          <CardContent className="space-y-3">
                            <div>
                              <p className="text-gray-300 text-sm">{cve.description}</p>
                            </div>
                            
                            <div className="grid md:grid-cols-2 gap-4 text-sm">
                              <div className="space-y-1">
                                <div className="flex justify-between">
                                  <span className="text-gray-400">Published:</span>
                                  <span className="text-blue-400">{cve.published}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-gray-400">Modified:</span>
                                  <span className="text-green-400">{cve.modified}</span>
                                </div>
                              </div>
                              <div>
                                <span className="text-gray-400 block mb-2">Affected Products:</span>
                                <div className="space-y-1 max-h-24 overflow-y-auto">
                                  {cve.affected.map((product, prodIndex) => (
                                    <div key={prodIndex} className="text-xs text-orange-400 bg-orange-900/20 p-1 rounded">
                                      {product}
                                    </div>
                                  ))}
                                </div>
                              </div>
                            </div>

                            {cve.references.length > 0 && (
                              <div>
                                <span className="text-sm text-gray-400 block mb-2">References:</span>
                                <div className="space-y-1 max-h-20 overflow-y-auto">
                                  {cve.references.slice(0, 3).map((ref, refIndex) => (
                                    <Button
                                      key={refIndex}
                                      variant="ghost"
                                      size="sm"
                                      onClick={() => window.open(ref, '_blank')}
                                      className="text-blue-400 hover:bg-blue-900/20 h-auto p-1 text-xs"
                                    >
                                      <ExternalLink className="w-3 h-3 mr-1" />
                                      {ref.length > 50 ? ref.substring(0, 50) + '...' : ref}
                                    </Button>
                                  ))}
                                  {cve.references.length > 3 && (
                                    <div className="text-xs text-gray-500">
                                      +{cve.references.length - 3} more references
                                    </div>
                                  )}
                                </div>
                              </div>
                            )}
                          </CardContent>
                        </Card>
                      ))
                    ) : (
                      <div className="text-center py-8 text-gray-400">
                        <FileText className="w-12 h-12 mx-auto mb-4 text-gray-500" />
                        <p>No CVE information found</p>
                      </div>
                    )}
                  </TabsContent>

                  <TabsContent value="recommendations" className="space-y-4">
                    <Card className="bg-slate-700/30">
                      <CardHeader>
                        <CardTitle className="text-white">Security Recommendations</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <ul className="space-y-3">
                          {results.recommendations.map((rec, index) => (
                            <li key={index} className="flex items-start gap-2">
                              <Shield className="w-5 h-5 text-blue-400 mt-0.5 flex-shrink-0" />
                              <span className="text-gray-300">{rec}</span>
                            </li>
                          ))}
                        </ul>
                      </CardContent>
                    </Card>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Educational Information */}
        <Card className="mt-6 bg-slate-800/50 backdrop-blur-sm border-slate-700">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-white">
              <Terminal className="w-5 h-5" />
              About Exploit Databases
            </CardTitle>
          </CardHeader>
          <CardContent className="text-gray-300 space-y-4">
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-semibold mb-2 text-white">Database Sources:</h4>
                <ul className="space-y-1 text-sm">
                  <li>• <strong>Exploit-DB:</strong> Comprehensive exploit archive</li>
                  <li>• <strong>CVE Database:</strong> Common Vulnerabilities and Exposures</li>
                  <li>• <strong>NVD:</strong> National Vulnerability Database</li>
                  <li>• <strong>Metasploit:</strong> Penetration testing framework</li>
                  <li>• <strong>Security Advisories:</strong> Vendor-specific notices</li>
                </ul>
              </div>
              <div>
                <h4 className="font-semibold mb-2 text-white">Best Practices:</h4>
                <ul className="space-y-1 text-sm">
                  <li>• Regular vulnerability assessments</li>
                  <li>• Timely patch management</li>
                  <li>• Security monitoring and alerting</li>
                  <li>• Incident response planning</li>
                  <li>• Defense-in-depth strategy</li>
                </ul>
              </div>
            </div>

            <Alert className="bg-amber-900/20 border-amber-500/50 text-amber-200">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                <strong>Responsible Use:</strong> This tool is for security research, vulnerability assessment, 
                and defensive purposes only. Always ensure you have proper authorization before testing systems.
              </AlertDescription>
            </Alert>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}